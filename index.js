require('dotenv').config() // —Ü–µ –º–∏ –æ—Ç—Ä–∏–º—É—ç–º –¥–æ—Å—Ç—É–ø –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–º—ñ–Ω–Ω–æ–π —è–∫–∞ –∑–∞—Ä–∞–∑ –≤ –Ω–∞—Å —Ü–µ —Ç–æ–∫–µ–Ω, –º–∏ –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É dotenv
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy') // —Ü–µ –º–∏ –ø—ã–¥–∫–ª—é—á–∏–ª–∏ –≤–∂–µ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ —Ç–æ—á–Ω—ã—à–µ –±—ã–±–ª—ã–æ—Ç–µ–∫—É –¥–ª—è –Ω—å–æ–≥–æ —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è —Ç–∞–∫ —Ä–æ–∑—É–º—ñ—é —ó—ó –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å


const bot = new Bot(process.env.BOT_API_KEY); // —Ü–µ –º–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å–∞ —ã –ø–µ—Ä–µ–¥–∞–ª–∏ –π–æ–º—É –≤ —è–∫–æ—Å—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ç–æ–∫–µ –±–æ—Ç–∞


bot.api.setMyCommands([
  { command: "start", description: "Start the bot" },
  { command: "help", description: "Show help text" },
  { command: "settings", description: "Open settings" },
  { command: "mood", description: "Open keyboard test1" },
  { command: "opinion", description: "Open keyboard test2" },
  { command: "share", description: "Open keyboard test3" },
  { command: "inline_keyboard", description: "Open keyboard test4" },
]);

bot.command(['start', 'syperStart', 'megaStart'], async (ctx) => { // –ø—Ä–æ–ø–∏—Å—É—î–º –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç, –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —Ü–µ –∫–æ–º–∞–Ω–¥–∞ —ñ–Ω—à–∏–π —Ü–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, –∞ –≤ —è–∫–æ—Å—å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –æ—Ç—Ä–∏–º—É—î ctx = context
    await ctx.reply(" –ø—Ä–∏–≤—ñ—Ç, —à–æ —Ç–∏? <a href='google.com'>—Ç—É—Ç –≤ –Ω–∞—Å –≥—É–≥—É–ª</a>", {
        parse_mode: 'HTML',
        reply_parameters: {message_id: ctx.message.message_id}
    }); // –≤—ñ–¥–ø–æ–≤—ñ–¥—å
}) 
bot.command("help", async (ctx) => {
  await ctx.reply("–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É");
});
bot.command("mood", async (ctx) => {
    const moodKeyboard = new Keyboard().text("—Ç–æ–ø").row().text("–Ω–æ—Ä–º").row().text('—Ñ–∏–≥–Ω—è').resized().oneTime();
    await ctx.reply("—è–∫ —Ç–∏?", {
      reply_markup: moodKeyboard
  });
});

bot.command("opinion", async (ctx) => {
    const opinionLabels = ["—Ç–æ–ø", "–Ω–æ—Ä–º", "—Ñ–∏–≥–Ω—è"];
    const rows = opinionLabels.map((label) => {
        return [
            Keyboard.text(label)
        ]
    })
    const opinionKeyboard = Keyboard.from(rows).resized().oneTime();
    await ctx.reply("—è–∫ —Ç–æ–±—ñ —è?", {
      reply_markup: opinionKeyboard
    });
});

bot.command('share', async (ctx) => {
    const shareKeyboard = new Keyboard().requestLocation("–õ–æ–∫–∞—Ü—ñ—è").row().requestContact("–ö–æ–Ω—Ç–∞–∫—Ç").row().requestPoll("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è").resized().oneTime();
    await ctx.reply("–ß–∏–º —Ö–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å?", {
        reply_markup: shareKeyboard
    })
})
bot.command('inline_keyboard', async(ctx) => {
    const inlineKeyboard = new InlineKeyboard()
      .text("label1", "anserLabel1")
      .text("label2", "anserLabel2")
      .text("label3", "anserLabel3")
      .text("label4", "anserLabel4")
      .text("label5", "anserLabel5")
    await ctx.reply(
      "–í–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç–≤–æ—ó–º –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º",
      {
        reply_markup: inlineKeyboard,
      }
    );
})
bot.callbackQuery(
  ["anserLabel1", "anserLabel2", "anserLabel3", "anserLabel4", "anserLabel5"],
    async (ctx) => {
        await ctx.answerCallbackQuery();
    await console.log(ctx.match);
      await ctx.reply(
        `–¥—è–∫—É—é —â–æ –æ–±—Ä–∞–≤ –≤–∞—Ä—ñ–∞–Ω—Ç —Ü–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∏–π –≤–∏–±—ñ—Ä –∫–Ω–æ–ø–∫–∏ ${ctx.match} —ñ –≤—ñ–Ω –≤–ø–ª–∏–Ω–µ —Ç—É–ø–æ –Ω–∞ –≤—Å–µ –≤—Å–µ –≤—Å–µ....`
      );
  }
);


// :contact = message:contact
bot.on(':contact', async (ctx) => {
  await ctx.reply(
    "–¥—è–∫—É—é –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç"
  );
});
bot.on(":location", async (ctx) => {
  await ctx.reply("–¥—è–∫—É—é, –ø–æ —Ç–µ–±–µ –≤–∂–µ –≤–∏—ó—Ö–∞–ª–∏");
});
bot.on(":poll", async (ctx) => {
  await ctx.reply("–¥–∞ –¥–∞ –ø–æ–ø–∏—Ç–∞–π –º–µ–Ω–µ —â–µ –≤—Å—è–∫–µ —è –∂ —Ç–∞–∫–∏–π —É–º–Ω–∏–π —à–æ –ø—ñ–ø–µ—Ü");
});

bot.on('message:voice', async (ctx) => {
    await ctx.reply("–∞ –º–æ–∂–µ —Ç–∏ –Ω–µ –±—É–¥–µ—à –º–µ–Ω—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏, —è –∂ –≤—Å–µ —Ç–∞–∫–∏ –±–æ—Ç");
});
bot.on('message').filter((ctx) => {
    return ctx.message.text.toLocaleLowerCase().includes('—Ä–æ–º–∞');
}, async (ctx) => {
    await ctx.reply("<span class='tg-spoiler'> –Ω—É —Ç–∏ —ñ –º—É–¥–∞–∫ –†–æ–º–∞ </span>", {
      parse_mode: "HTML",
    });
})
bot.hears([/–º—Ä–∞–∑—å/, /–º—É–¥–∞–∫/, /–∫–æ–Ω—á–∞–∫/], async (ctx) => {
    ctx.reply('–°–∞–º —Ç–∞–∫–∏–π, –ø–æ–Ω—è–≤?!')
})

bot.on('message', async (ctx) => {
    await ctx.reply('–∞–≥–∞ –∞–≥–∞');
    await ctx.react('üê≥');
})

 
bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling apdate ${ctx.update.update_id}`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact to Telegram', e);
    } else {
        console.error('Unknown error', e);
    }
});

bot.start(); // –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞